name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-tests
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results/
          retention-days: 30

  # Job 2: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: poker_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup test database
        run: |
          npm run db:migrate
          npm run db:seed:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/poker_test
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/poker_test
          REDIS_URL: redis://localhost:6379
          NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/
          retention-days: 30

  # Job 3: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: poker_e2e
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/poker_e2e
          REDIS_URL: redis://localhost:6379
          NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key

      - name: Setup E2E database
        run: |
          npm run db:migrate
          npm run db:seed:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/poker_e2e
          NODE_ENV: test

      - name: Start application
        run: |
          npm start &
          npx wait-on http://localhost:3000
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/poker_e2e
          REDIS_URL: redis://localhost:6379
          PORT: 3000

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-screenshots
          path: test-results/
          retention-days: 7

  # Job 4: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: poker_perf
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Build and start application
        run: |
          npm run build
          npm start &
          npx wait-on http://localhost:3000
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/poker_perf
          REDIS_URL: redis://localhost:6379

      - name: Setup performance test data
        run: npm run db:seed:performance
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/poker_perf

      - name: Run API performance tests
        run: artillery run performance/api-load.yml --output performance-results-api.json

      - name: Run WebSocket performance tests
        run: artillery run performance/websocket-load.yml --output performance-results-ws.json

      - name: Generate performance reports
        run: |
          artillery report performance-results-api.json --output api-performance-report.html
          artillery report performance-results-ws.json --output ws-performance-report.html

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            performance-results-*.json
            *-performance-report.html
          retention-days: 30

      - name: Performance regression check
        run: npm run test:performance:check
        env:
          PERFORMANCE_BASELINE: performance/baseline.json

  # Job 5: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security vulnerability tests
        run: npm run test:security
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379

      - name: Run dependency security audit
        run: npm audit --audit-level high

      - name: Run OWASP ZAP security scan
        if: github.event_name == 'push'
        run: |
          docker run -v $(pwd):/zap/wrk/:rw \
            -t owasp/zap2docker-stable zap-baseline.py \
            -t http://host.docker.internal:3000 \
            -J zap-report.json \
            -r zap-report.html
        continue-on-error: true

      - name: Upload security test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: |
            zap-report.*
            test-results/security/
          retention-days: 30

  # Job 6: Code Quality
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint
        run: npm run lint -- --format=json --output-file=eslint-results.json
        continue-on-error: true

      - name: Run Prettier check
        run: npm run format:check

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Upload code quality results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: code-quality-results
          path: eslint-results.json
          retention-days: 30

  # Job 7: Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-tests, code-quality]
    if: always()

    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "# Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "✅ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "✅ Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Integration Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ E2E Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-tests.result }}" == "success" ]; then
            echo "✅ Security Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "✅ Code Quality: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code Quality: Failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check overall test status
        run: |
          if [ "${{ needs.unit-tests.result }}" != "success" ] || 
             [ "${{ needs.integration-tests.result }}" != "success" ] || 
             [ "${{ needs.e2e-tests.result }}" != "success" ] || 
             [ "${{ needs.security-tests.result }}" != "success" ]; then
            echo "Some tests failed!"
            exit 1
          fi
          echo "All tests passed!"

  # Job 8: Deployment Gate (only for production)
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-tests, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Check test results
        run: |
          echo "Checking all test results before allowing deployment..."
          
          # Only proceed if all tests passed
          if [ "${{ needs.unit-tests.result }}" == "success" ] && 
             [ "${{ needs.integration-tests.result }}" == "success" ] && 
             [ "${{ needs.e2e-tests.result }}" == "success" ] && 
             [ "${{ needs.security-tests.result }}" == "success" ] && 
             [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "✅ All tests passed. Deployment approved!"
            echo "DEPLOYMENT_APPROVED=true" >> $GITHUB_ENV
          else
            echo "❌ Some tests failed. Deployment blocked!"
            echo "DEPLOYMENT_APPROVED=false" >> $GITHUB_ENV
            exit 1
          fi

      - name: Create deployment approval
        if: env.DEPLOYMENT_APPROVED == 'true'
        run: |
          echo "Creating deployment approval artifact..."
          echo "timestamp=$(date -u +%Y%m%d_%H%M%S)" >> deployment-approval.txt
          echo "commit_sha=${{ github.sha }}" >> deployment-approval.txt
          echo "all_tests_passed=true" >> deployment-approval.txt

      - name: Upload deployment approval
        if: env.DEPLOYMENT_APPROVED == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: deployment-approval
          path: deployment-approval.txt
          retention-days: 90